# 全局开发规范

## **参考说明**

- **前端规范**：请参阅 [Jinshanshan/frontend/.cursorrules]
- **后端规范**：请参阅 [Jinshanshan/backend/.cursorrules]

···
JINSANSAN
 - frontend
 - backend
 - shared （通用类型定义）

## **开发顺序**

1. **全局基础设施**：初始化项目结构，配置工具链（如代码格式化、Linter、CI/CD）。
2. **中间层**：构建后端服务（如 API、数据库）。
3. **业务层**：开发核心业务逻辑。
4. **UI层**：实现前端界面。

---

## **架构设计**

### **技术栈**

#### 前端
- **框架**：React (18.2.0)
- **语言**：TypeScript (5.3.3)
- **UI库**：MUI (5.16.9)
- **状态管理**：Redux Toolkit (2.0.1) / Zustand (4.4.7)

#### 后端
- **运行时**：Node.js (22.12.0)
- **框架**：Express (4.21.2)
- **数据库**：MongoDB (7.0.4)
- **缓存**：Redis (7.2.3)

# 前后端交互规范

## API 契约
- 统一的请求/响应格式
- 错误码对照表
- 数据类型映射关系
```
// 统一响应格式
interface ApiResponse<T> {
  code: number;        // 状态码
  message: string;     // 消息
  data: T;            // 数据
  timestamp: number;   // 时间戳
}

// 统一错误码
enum ErrorCode {
  SUCCESS = 200,
  UNAUTHORIZED = 401,
  FORBIDDEN = 403,
  NOT_FOUND = 404,
  INTERNAL_ERROR = 500
}
```

## 开发流程
- API 先行，前后端并行开发
- 接口变更通知机制
- 联调测试规范
### API 变更流程
1. 提出变更申请（包含影响范围）
2. 前后端评审确认
3. 更新 API 文档
4. 记录变更通知
5. 实施变更

## 类型共享
- 共享的 DTO 类型定义
- API 响应类型定义
- 通用工具类型

### 类型共享策略
1. 使用 monorepo 管理共享类型
2. 通过 npm 包共享类型定义
3. 使用代码生成工具自动同步类型

### **架构模式**
- **模式**：前后端分离架构

---

## **代码规范**

### **代码风格**

#### 函数
- **单函数最大行数**：15行
- **最大参数数量**：4个
- **最大嵌套层级**：4层
- **显式返回**：所有函数必须显式返回值

#### 文件
- **单文件最大行数**：500行
- **重复代码阈值**：10行

#### 复杂度
- **最大圈复杂度**：10

### **注释规范**
- **函数注释**：所有函数必须使用 JSDoc 格式
- **复杂逻辑**：复杂逻辑部分必须有详细注释
- **JSDoc 必填项**：
  - `@param` 参数描述
  - `@returns` 返回值描述
  - `@throws` 异常描述

### **命名规则**

#### 文件命名
- **React 组件**：使用大驼峰命名 (PascalCase)，如 `ErrorBoundary.tsx`
- **工具和服务**：使用小驼峰命名 (camelCase)，如 `httpService.ts`
- **类型定义**：使用大驼峰命名，如 `UserTypes.ts`
- **测试文件**：与被测试文件同名，添加 `.test` 或 `.spec` 后缀

#### 目录命名
- **功能模块目录**：使用小写字母，如 `components`, `hooks`, `utils`
- **组件目录**：使用大驼峰命名，如 `ErrorBoundary`, `UserProfile`
- **特性目录**：使用小写字母，如 `auth`, `form`, `monitoring`

---

## **测试规范**
### **测试环境**
// vitest.config.ts 前后端通用基本配置
{
  test: {
    globals: true,
    environment: process.env.TEST_ENV === 'node' ? 'node' : 'jsdom',  // 前端使用 'jsdom'，后端使用 'node'
    setupFiles: ['./src/test/setup.ts'],
    coverage: {
      provider: 'v8',
      reporter: ['text', 'json', 'html'],
      exclude: [
        'node_modules/',
        'src/test/',
        '**/*.d.ts',
        '**/*.test.{ts,tsx}',
        '**/types/'
      ]
    },
    include: ['**/src/**/*.{test,spec}.{ts,tsx}'],
    exclude: ['node_modules', 'dist'],
    testTimeout: 10000
  }
}



---


## **质量保证**

### **代码检查**
- **Linter**：ESLint
- **格式化**：Prettier

### **自动化**
- **CI/CD**：集成自动化测试和代码检查

---

技术栈兼容性与最佳实践
1. Node.js 与 TypeScript 兼容性
Node.js 22.12.0 LTS 与 TypeScript 5.3.3 的兼容性
兼容性概述
Node.js 22.12.0 LTS 提供了对现代 ECMAScript 特性的支持（如 ES 模块、async/await、top-level await 等），与 TypeScript 5.3.3 完全兼容。
TypeScript 5.3.3 支持现代 JavaScript 语法和 Node.js 模块，可以通过配置轻松集成。

配置建议
在 tsconfig.json 中设置以下选项，确保兼容性：

···
{
  "module": "ESNext",
  "target": "ES2022"
}
···

性能优化
异步本地存储
Node.js 引入了 AsyncLocalStorage，用于跨异步操作传递上下文数据（如日志、请求 ID）。
示例：

···
const { AsyncLocalStorage } = require('async_hooks');
const asyncLocalStorage = new AsyncLocalStorage();
···

V8 引擎优化
提升 JavaScript 执行速度，适用于大量计算和循环操作。

2. TypeScript 与 React 兼容性
TypeScript 5.3.3 与 React 18.2.0

最佳实践

启用严格模式：在 tsconfig.json 中启用 strict。
安装 @types：确保使用与 React 18 兼容的类型定义包。
···
npm install --save-dev @types/react@18.2.7 @types/react-dom@18.2.7
···
配置 JSX：在 tsconfig.json 中正确配置 JSX 支持。

推荐用法
利用并发渲染功能（如 Suspense 和 useTransition）优化性能，确保类型检查有效。
···
import { SuspenseList } from 'react';

const App = () => (
  <SuspenseList revealOrder="forwards">
    <Suspense fallback={<Loading />}>
      <ComponentA />
    </Suspense>
    <Suspense fallback={<Loading />}>
      <ComponentB />
    </Suspense>
  </SuspenseList>
);
···


3. MongoDB 7.0.4 新特性
查询增强
新聚合操作符：新增 $median 和 $percentile，简化复杂统计分析。
性能提升：优化时间序列数据处理，提高查询效率。
事务支持
增强的 ACID 支持：提高分布式环境中的可靠性。
配置建议
分片与副本集：根据数据规模配置分片策略，优化性能。
聚合优化： MongoDB 7.0 提供了增强的 aggregate 操作符，大幅减少客户端计算压力。


4. Redis 7.2.3 新特性
新数据结构
流扩展：改进流操作，适合时间序列和事件驱动场景。
性能优化
复制延迟减少：适用于高负载场景。
内存管理：新增内存碎片处理和更精确的报告。

配置建议
···
maxmemory 4gb
maxmemory-policy allkeys-lru
···

推荐特性
Redis Streams：结合 Pub/Sub，可处理实时数据流。


5. Material UI 5.16.9 新特性
新组件特性
实现 Material Design 3，提供更灵活的布局。
性能优化
使用 Emotion 增强样式引擎，减少渲染开销。
TypeScript 支持
提供严格类型定义，优化泛型组件的开发。
示例：泛型 Button 组件：
···
interface ButtonProps<T> {
  onClick: (args: T) => void;
  label: string;
}

function Button<T>({ onClick, label }: ButtonProps<T>) {
  return <button onClick={() => onClick({ data: 'example' } as T)}>{label}</button>;
}

interface MyEvent {
  data: string;
}

const handleClick = (event: MyEvent) => {
  console.log(event.data);
};

<Button<MyEvent> onClick={handleClick} label="Click Me" />;
···

响应式布局：

使用自定义断点实现响应式设计
···
const theme = createTheme({
  breakpoints: {
    values: { xs: 0, sm: 600, md: 960, lg: 1280, xl: 1920 },
  },
});

const isSmallScreen = useMediaQuery(theme.breakpoints.down('sm'));
···


6.React 18 + Suspense + Concurrent Mode
Suspense 和异步组件：React 18 中的 Suspense 配合懒加载使用可以显著提高页面加载速度。除了默认的 React.lazy，还可以通过 SuspenseList 控制多个异步组件的渲染顺序，避免屏幕闪烁或布局突变。

示例：
```
import { SuspenseList } from 'react';

const App = () => (
  <SuspenseList revealOrder="forwards">
    <Suspense fallback={<Loading />}>
      <ComponentA />
    </Suspense>
    <Suspense fallback={<Loading />}>
      <ComponentB />
    </Suspense>
  </SuspenseList>
);
```

服务器端渲染（SSR）：React 18 改进了 SSR 和 hydrate 方法的性能，如果你的应用支持服务端渲染，可以利用 React 18 对 SSR 性能的增强，减少首次加载的时间。



7. TypeScript 5.3.3 - 类型安全
模板字面量类型：

TypeScript 5.3 引入了模板字面量类型的强大支持，适用于创建基于字符串模式的类型，极大提升了代码的类型推断能力。
类型合并和增强：

TypeScript 5.3 进一步优化了类型合并的功能，特别是在处理第三方库时。如果你需要扩展和增强第三方库的类型定义，可以利用 declare module 和 declare global 等功能进行扩展和增强。
最佳实践：

启用严格模式： 在 tsconfig.json 中启用严格模式，以提高类型安全性和代码质量。
使用路径别名： 在 tsconfig.json 中配置路径别名，以简化模块导入路径。
定义全局类型： 使用 declare global 来定义全局类型，特别是在使用第三方库时。
利用 TypeScript 的类型检查： 在项目中使用 TypeScript 的类型检查功能，确保代码的类型安全性和一致性。
使用 @typescript-eslint： 安装并配置 @typescript-eslint/parser 和 @typescript-eslint/eslint-plugin，以利用 ESLint 的 TypeScript 支持。
配置示例：

{
  "compilerOptions": {
    "target": "ES2022",
    "module": "ESNext",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    }
  },
  "include": ["src"],
  "exclude": ["node_modules", "dist"]
}

ESLint v9.16 新特性及注意事项
1. 新特性：

a) 类型注解的改进
ESLint v9.16 强化了对 TypeScript 的支持，尤其是在处理类型注解时。新增了一些规则和功能，可以让 ESLint 更好地理解 TypeScript 代码，避免常见的类型问题。

支持 @ts-ignore 和 @ts-expect-error：当你在代码中使用这些指令时，ESLint 现在能更好地识别并正确处理它们，避免错误提示。
更智能的类型推断：通过与 TypeScript 配合使用时，ESLint 可以在更多的场景下推断类型，并确保 TypeScript 代码的类型一致性。
b) no-unsafe-optional-chaining 规则的增强
v9.16 版本加强了对 Optional Chaining (?.) 的支持，新增了 no-unsafe-optional-chaining 规则。这个规则防止开发者在 Optional Chaining 使用过程中引发潜在的错误。

// 错误示例：
const foo = obj?.bar();
该规则会提示 obj?.bar() 在某些情况下可能会出现意外错误，因此需要额外的小心。

c) no-non-null-assertion 强化
这个规则用于避免 TypeScript 中的非空断言操作符（!）的使用。通过禁用它，可以避免潜在的运行时错误。

// 错误示例：
const value = someValue!; // 强制断言值不是 null 或 undefined
d) import/no-unresolved 增强
该规则用于检测是否存在无法解析的模块或文件引用。v9.16 改进了此规则，支持更多的模块解析模式，特别是增强了与模块解析工具（如 Webpack、Babel 等）的兼容性。

e) no-duplicate-imports 规则增强
该规则用于禁止在同一模块中多次导入同一内容。v9.16 对其进行了强化，支持更多的文件和模块配置。

// 错误示例：
import { foo } from 'bar';
import { bar } from 'bar';
2. 配置文件变化及注意事项：

ESLint v9.16 引入了一些配置文件方面的细微变化：

a) 配置文件的 overrides 支持增强
overrides 是一种强大的方式，可以在同一个配置文件中为不同类型的文件设置不同的规则。v9.16 增强了 overrides 的功能，允许你对不同目录或文件类型进行更精细的配置。

{
  "overrides": [
    {
      "files": ["*.ts", "*.tsx"],
      "rules": {
        "no-unsafe-optional-chaining": "error"
      }
    },
    {
      "files": ["*.js"],
      "rules": {
        "no-unsafe-optional-chaining": "warn"
      }
    }
  ]
}
b) 配置文件 extends 选项优化
v9.16 对 extends 的使用进行了优化，支持更细粒度的规则继承，使得规则配置更加灵活。尤其在与一些第三方规则包集成时，ESLint 将提供更好的兼容性和性能。

{
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended"
  ]
}
